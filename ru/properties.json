{
  "Common/WSDL/HTTPHeaders": {
    "CustomHeadersConfigurator": {
      "CustomHeaders": "Коллекция заголовков HTTP"
    },
    "HTTPHeaderItem": {
      "HeaderValue": "Значение",
      "Name": "Имя"
    }
  },
  "Common/WSDL/WSDLClientAuth": {
    "WSDLAuthorization": {
      "Mode": "Тип авторизации",
      "NamePassCredentials": "Реквизиты авторизации по имени пользователя и паролю",
      "OAuthCredentials": "Реквизиты авторизации по токену OAuth"
    },
    "WSDLNamePassAuthCredentials": {
      "Password": "Пароль",
      "UserName": "Имя пользователя"
    },
    "WSDLOAuthCredentials": {
      "Token": "Токен OAuth"
    }
  },
  "Common/WSDL/WSDLRequestDebug": {
    "WSDLRequestDebug": {
      "DumpRequest": "Сохранять текст запроса на диск",
      "DumpRequestFolder": "Папка на диске для сохранения запросов",
      "ResponseStub": "Имя файла, подставляемого в качестве ответа",
      "UseResponseStub": "Имитировать запрос с ответом в файле"
    }
  },
  "components/assnrules": {
    "AssnRulesEngine": {
      "Params": "Параметры алгоритма"
    },
    "AssnRulesParams": {
      "ExcludeLargeSupportItems": "Исключать элементы с поддержкой, больше максимальной",
      "ExcludeSingleItems": "Исключить одиночные наборы",
      "MaxSupport": "Максимальная поддержка, %",
      "MinConfidence": "Минимальная достоверность правила, %",
      "MinLift": "Минимальный лифт правила",
      "MinSupport": "Минимальная поддержка, %",
      "NConsequentMax": "Максимальное число следствий",
      "NItemsMax": "Максимальное число элементов",
      "SelectColumn": "Содержащие выбранные элементы"
    }
  },
  "components/autocorrelation": {
    "AutoCorrelationEngine": {
      "CalcPacf": "Рассчитывать ЧАКФ",
      "DomainCalc": "Область расчета АКФ",
      "LagCount": "Количество отсчетов"
    }
  },
  "components/binning": {
    "BinningBinsDefExtension": {
      "KindForBins": "Назначение колонки для интервалов"
    },
    "BinningContinuousBinItem": {
      "LowerBound": "Нижняя граница диапазона",
      "UpperBound": "Верхняя граница диапазона"
    },
    "BinningCountLinContMethodSettings": {
      "BinsCount": "Количество"
    },
    "BinningCustomBinItem": {
      "BinLabel": "Метка интервала",
      "BinNumber": "Номер интервала",
      "BoundModes": "Режим границ интервала",
      "RelativeVolume": "Относительный объем интервалов"
    },
    "BinningDefExtension": {
      "AlwaysDefaultSettings": "Всегда использовать настройки метода по умолчанию",
      "BinsType": "Тип интервалов",
      "LabelTemplate": "Шаблон меток",
      "MethodType": "Тип метода получения интервалов"
    },
    "BinningLinearContinuousMethodSettings": {
      "LowerLimit": "Нижняя граница",
      "UpperLimit": "Верхняя граница"
    },
    "BinningSDMethodSettings": {
      "SDMode": "От среднего"
    },
    "BinningTileDateTimeMethodSettings": {
      "MatchingObservationsMode": "Совпадающие наблюдения",
      "TileCount": "Количество"
    },
    "BinningTileNumericMethodSettings": {
      "SumValues": "Из сумм значений"
    },
    "BinningWidthLinDateTimeMethodSettings": {
      "DateTimeSpanCount": "Ширина",
      "DateTimeSpanType": "Тип интервала"
    },
    "BinningWidthLinNumMethodSettings": {
      "BinWidth": "Ширина"
    }
  },
  "components/calcdata": {
    "CalcExprColumnItem": {
      "Cached": "Кэшировать значения"
    },
    "ExprColumnItem": {
      "DataType": "Тип данных",
      "Description": "Описание",
      "DisplayName": "Метка",
      "Expression": "Выражение",
      "Intermediate": "Промежуточное выражение"
    }
  },
  "components/clope": {
    "ClopeEngine": {
      "Params": "Параметры алгоритма"
    },
    "ClopeParams": {
      "LimitNClusters": "Ограничить число кластеров",
      "LimitNIters": "Ограничить число итераций",
      "NClustersMax": "Максимальное число кластеров",
      "NItersMax": "Число итераций",
      "Repulsion": "Коэффициент отталкивания"
    }
  },
  "components/clusterization": {
    "ClusterizationEngine": {
      "Params": "Параметры алгоритма"
    },
    "ClusterizationParams": {
      "NClusters": "Число кластеров",
      "NClustersAutoSelect": "Автоопределение числа кластеров",
      "NClustersMax": "Максимальное число кластеров",
      "NClustersMin": "Минимальное число кластеров",
      "StatTestThreshold": "Порог разделения кластеров"
    }
  },
  "components/coarseclasses": {
    "CoarseClassesInputContinuousParams": {
      "FineIntervalsCount": "Количество интервалов",
      "IncludeHighBounds": "Включить верхние границы интервала",
      "UsePrequanting": "Предварительное квантование"
    },
    "CoarseClassesInputDiscreteParams": {
      "UseFineClassesBinning": "Начальные классы в качестве разбиения"
    },
    "CoarseClassesInputExternalParams": {
      "BinningId": "Идентификатор внешнего разбиения"
    },
    "CoarseClassesInputParams": {
      "MaxClassCount": "Максимальное количество классов",
      "MinClassPercentage": "Минимальный вес класса, %",
      "UniformityCoef": "Равномерность"
    },
    "CoarseClassesTargetParams": {
      "TuneEventValue": "Настраиваемое значение \"события\""
    }
  },
  "components/columnflipping": {
    "ColumnFlippingEngine": {
      "SkipNullCases": "Игнорировать пустые значения"
    }
  },
  "components/coluniondata": {
    "ColUnionDataEngine": {
      "RowsPaddingType": "Дополнение до наибольшего набора",
      "TailsAlignType": "Количество строк соответствует"
    }
  },
  "components/condition": {
    "Condition": {
      "DebugMode": "Режим отладки"
    },
    "ConditionItem": {
      "CaseSensitive": "Учитывать регистр",
      "CompareValue": "Сравниваемое значение",
      "FieldLink": "Сравниваемое поле"
    }
  },
  "components/crosstab": {
    "CrossTabEngine": {
      "AllowInvalidName": "Разрешить невалидные имена",
      "DisplayNameSeparator": "Разделитель частей меток полей",
      "SlidingUniqueValues": "Скользящие уникальные значения",
      "SlidingUniqueValuesLimit": "Ограничение количества значений",
      "UniqueValueNames": "Уникальные значения как имена полей"
    }
  },
  "components/datatoxml": {
    "DataToXMLEngine": {
      "Configurator": "Настройки экспорта",
      "DocIDColumn": "Идентификатор документа",
      "EscapeQuotes": "Экранировать одинарные и двойные кавычки",
      "EscapeTabCRLFInAttr": "Экранировать табуляции и переводы строк в атрибутах",
      "Prettify": "Добавлять отступы и переводы строк",
      "RowsDocIdenti": "Идентификация документа"
    }
  },
  "components/em": {
    "EMEngine": {
      "Params": "Параметры алгоритма"
    },
    "EMParams": {
      "IndependentVariables": "Переменные независимы",
      "MedianModification": "Медианная модификация"
    }
  },
  "components/execcmd": {
    "ExecCmdEngine": {
      "TerminateByTimeout": "Завершить программу по тайм-ауту",
      "Timeout": "Тайм-аут выполнения узла (мс)"
    }
  },
  "components/extractxml": {
    "ExtractXMLEngine": {
      "HaltOnParseErrors": "Останавливаться при ошибках",
      "IDColumn": "Столбец, идентифицирующий XML-документ",
      "ImportXMLSettings": "Настройки импорта XML",
      "InputColumn": "Столбец, содержащий XML",
      "NeedUnescape": "Разэкранировать сущности XML",
      "ProduceErrorDescs": "Выдавать описание кодов завершения"
    }
  },
  "components/factoranalysis": {
    "FactorAnalysisEngine": {
      "CumDispersion": "Порог дисперсии, %",
      "EigenValuesThreshold": "Порог собственного значения",
      "NFactors": "Число факторов",
      "NOutFactorsMax": "Число факторов",
      "PruneOutFactors": "Ограничить число выходных факторов",
      "RotationType": "Метод вращения",
      "SignificanceCriterion": "Критерий значимости"
    }
  },
  "components/filterdata": {
    "FilterColumnItem": {
      "CaseSensitive": "Учитывать регистр",
      "CompareValue": "Значение для сравнения",
      "CompareValueList": "Список значений",
      "CompareValueLowerBound": "Нижняя граница",
      "CompareValuePeriodBaseDate": "Базовая дата интервала",
      "CompareValuePeriodCount": "Значение временного промежутка",
      "CompareValuePeriodType": "Тип временного промежутка",
      "CompareValueUpperBound": "Верхняя граница",
      "DataType": "Тип данных",
      "Name": "Имя",
      "RelationType": "Тип отношения"
    }
  },
  "components/filtration": {
    "DataRecoveryEngine": {
      "MaxNullsPercent": "Допустимый процент пропусков",
      "OrderedSample": "Исходные данные упорядочены"
    },
    "ElimOutlierColumnDefExtension": {
      "ActionExtr": "Метод обработки экстремальных",
      "ActionOut": "Метод обработки выбросов",
      "DetectEKvartil": "Для экстремального",
      "DetectESko": "Для экстремального",
      "DetectOKvartil": "Для выброса",
      "DetectOSko": "Для выброса",
      "ModeOE": "Метод выявления",
      "SettedValueExtr": "Заменять на",
      "SettedValueOut": "Заменять на"
    },
    "ElimOutlierEngine": {
      "OrderedSample": "Исходные данные упорядочены"
    }
  },
  "components/forecast": {
    "ARIMAXParams": {
      "AutoStructure": "Определить структуру автоматически",
      "CalcConfidenceInterval": "Рассчитать доверительный интервал",
      "CalcResiduals": "Рассчитать ошибку аппроксимации",
      "ConfidenceInterval": "Доверительный интервал прогноза в %",
      "D": "Порядок интегрирования",
      "DS": "Порядок сезонного интегрирования",
      "ForecastHorizon": "Горизонт прогноза",
      "IncludeIntercept": "Включить константу в модель",
      "IncludeSeasonality": "Включить расчет сезонности",
      "P": "Порядок AR части",
      "PS": "Порядок сезонной AR части",
      "Q": "Порядок MA части",
      "QS": "Порядок сезонной MA части",
      "SeasonalPeriod": "Период сезонной составляющей"
    },
    "ForecastEngine": {
      "ARIMAXParams": "Настройки ARIMAX"
    }
  },
  "components/groupdata": {
    "GroupDataEngine": {
      "DimValuesCached": "Кэшировать значения групп",
      "SortedResult": "Сортировать результирующие данные"
    }
  },
  "components/joindata": {
    "JoinDataEngine": {
      "IncludeJoinedKeyFields": "Добавлять присоединяемые ключевые поля",
      "JoinType": "Тип операции"
    }
  },
  "components/linregression": {
    "LinRegressionEngine": {
      "LinRegressionParams": "Настройки линейной регрессии"
    },
    "LinRegressionParams": {
      "LinRegressionMethod": "Отбор факторов и защита от переобучения",
      "LinRegSelQuality": "Критерий отбора факторов"
    }
  },
  "components/logregression": {
    "LogRegressionEngine": {
      "LogRegressionParams": "Настройки логистической регрессии"
    },
    "LogRegressionParams": {
      "LogRegressionMethod": "Отбор факторов и защита от переобучения",
      "LogRegSelQuality": "Критерий отбора факторов",
      "SetupCalibration": "Калибровка",
      "UseScoring": "Скоринг"
    }
  },
  "components/loop": {
    "LoopComponent": {
      "AppendIterationIdentifiers": "Добавлять идентификаторы итераций",
      "CompareValue": "Значение",
      "ConditionVariableLink": "Переменная условия завершения",
      "GroupCount": "Количество групп",
      "GroupDataSourceSocket": "Порт, содержащий столбцы для группировки",
      "GroupProcessingKind": "Вид групповой обработки",
      "GroupSize": "Количество строк в группе",
      "IgnoreErrors": "Игнорировать ошибки",
      "IterationCount": "Количество итераций",
      "LoopKind": "Вид цикла",
      "LoopVariableLink": "Переменная цикла",
      "MaxThreadCount": "Максимальное количество потоков",
      "ParallelProcessing": "Параллельная обработка",
      "TerminateCondition": "Условие завершения"
    }
  },
  "components/neuralnet": {
    "NeuralNetEngine": {
      "NetworkParams": "Настройки нейросети"
    },
    "NeuralNetworkAutofitParams": {
      "DecayAutofit": "Подобрать степень регуляризации",
      "MaxAutofitSeconds": "Время автоподбора не более (сек)",
      "MaxAutofitStages": "Шагов автоподбора не более",
      "StopAtZeroClsError": "Останов при нулевой ошибке классификации",
      "StructureAutofit": "Подобрать структуру",
      "SubSampleMaxSize": "Максимальный размер выборки",
      "SubSamplePercent": "Размер выборки в процентах",
      "UseInitialDecay": "Начать с указанной степени регуляризации",
      "UseInitialStructure": "Начать с указанной структуры",
      "UseSubSampling": "Использовать подмножество обучающего набора"
    },
    "NeuralNetworkParams": {
      "AutofitParams": "Параметры автоматического подбора",
      "StoppingCriteria": "Критерии останова алгоритма обучения",
      "StructureParams": "Параметры структуры нейросети",
      "TrainingParams": "Параметры алгоритма обучения"
    },
    "NeuralNetworkStoppingCriteria": {
      "MaxEpochs": "Максимальное количество эпох",
      "WStep": "Порог минимального изменения весов"
    },
    "NeuralNetworkStructureParams": {
      "HiddenLayers": "Количество скрытых слоев",
      "HiddenNeurons1": "Количество нейронов в первом скрытом слое",
      "HiddenNeurons2": "Количество нейронов во втором скрытом слое",
      "RegNNOutputInf": "Нижняя граница",
      "RegNNOutputLayer": "Ограничение на значение выходов",
      "RegNNOutputSup": "Верхняя граница"
    },
    "NeuralNetworkTrainingParams": {
      "ContinueTraining": "Продолжить обучение",
      "Decay": "Степень регуляризации",
      "NRestarts": "Количество рестартов"
    }
  },
  "components/partition": {
    "PartitionEngine": {
      "Partition": "Разбиение на множества"
    }
  },
  "components/reformcolumns": {
    "ReformColumnsEngine": {
      "CachingMethod": "Кэширование"
    }
  },
  "components/restclient": {
    "RESTClient": {
      "CustomHeadersConfigurator": "Настройки пользовательских заголовков",
      "ProduceErrorDescs": "Выдавать описание кодов завершения",
      "RequestConfigurator": "Настройки экспорта данных запроса",
      "RequestDebug": "Настройки отладки запроса"
    }
  },
  "components/sampling": {
    "SamplingEngine": {
      "Sampling": "Сэмплинг"
    }
  },
  "components/slidingwindow": {
    "SlidingWindowEngine": {
      "IncompleteRecordsProcessing": "Способ обработки неполных записей"
    }
  },
  "components/smoothing": {
    "SmoothingDefExtension": {
      "Algorithm": "Алгоритм сглаживания",
      "DecompositionLevel": "Глубина разложения",
      "EdgeExtension": "Продолжение границ",
      "Lambda": "Параметр Lambda",
      "LambdaAsPeriod": "Параметр Lambda задается периодом",
      "Period": "Период сглаживания",
      "WaveletOrder": "Порядок вейвлета",
      "WaveletType": "Тип вейвлета"
    }
  },
  "components/sonn": {
    "SONNEngine": {
      "Params": "Параметры алгоритма"
    },
    "SONNParams": {
      "CellTopology": "Топология сети",
      "NX": "Размер сети по X",
      "NY": "Размер сети по Y",
      "NZ": "Размер сети по Z",
      "SONNType": "Тип самоорганизующейся сети"
    }
  },
  "components/ungroupdata": {
    "UngroupDataEngine": {
      "AbsentDataPoints": "Точек отсутствия для прекращения позиции",
      "AbsentPeriodFraction": "Периодов отсутствия для прекращения позиции",
      "BalanceMethod": "Метод балансировки",
      "MaxDepthDataPoints": "Максимальное число точек каждого ряда",
      "MaxDepthPeriodFraction": "Максимальное число периодов сезонности",
      "MaxRareDensity": "Плотность точек редких товаров",
      "NoveltyPeriodFraction": "Периодов присутствия для новой позиции",
      "NumSeasonalIndexes": "Количество рассчитываемых сезонных индексов",
      "RoundFormat": "Формат округления",
      "RoundParam": "Параметр округления",
      "SeasonalityMultiplier": "Заданный период сезонности",
      "SeasonalityPeriod": "Период сезонности",
      "UngroupMethod": "Метод разгруппировки"
    }
  },
  "components/uniondata": {
    "CustomUnionDataEngine": {
      "ColumnDisplayNamePrefix": "Префикс метки",
      "ColumnNamePrefix": "Префикс имени",
      "UsePrefixes": "Использовать префиксы"
    }
  },
  "components/wsdlclient": {
    "WSDLClient": {
      "CompositeColumnNames": "Генерировать составные метки полей",
      "CustomHeadersConfigurator": "Настройки пользовательских заголовков",
      "IgnoreAbsentValues": "Разрешить пропуск обязательных полей",
      "ProduceErrorDescs": "Выдавать описание кодов завершения",
      "ProduceRawOutput": "Выдавать \"сырой\" ответ сервера",
      "RepeatUniqueValues": "Дублировать единичные значения",
      "RequestConfigurator": "Настройки экспорта данных запроса",
      "RequestDebug": "Настройки отладки запроса",
      "StrictValidation": "Проверять на строгое соответствие XSD",
      "TimeZone": "Временная зона по умолчанию"
    }
  },
  "exports/database": {
    "DBExport": {
      "ExportType": "Тип экспорта",
      "RecordCountForCommit": "Периодичность фиксации транзакции (строк)",
      "TableName": "Имя таблицы"
    }
  },
  "exports/excelfile": {
    "ExportExcelFile": {
      "FileType": "Тип файла Excel",
      "SheetName": "Имя листа",
      "WebSetting": "Настройки для web клиента"
    },
    "ExportExcelWebSetting": {
      "HeadersRow": "Строка заголовков"
    }
  },
  "exports/native": {
    "ExportNative": {
      "Compression": "Сжатие"
    }
  },
  "exports/textfile": {
    "ExportTextFile": {
      "CaptionType": "Строка заголовка",
      "CodePage": "Кодовая страница",
      "DateFormat": "Формат даты",
      "DateSeparator": "Разделитель даты",
      "DecimalSeparator": "Десятичный разделитель",
      "DelimiterChar": "Разделитель столбцов",
      "FormatType": "Формат данных",
      "TextQualifier": "Ограничитель строк",
      "TimeFormat": "Формат времени",
      "TimeSeparator": "Разделитель времени",
      "ValueFalse": "Ложь",
      "ValueNull": "Пусто",
      "ValueTrue": "Истина"
    }
  },
  "exports/xml": {
    "ExportXML": {
      "Configurator": "Настройки экспорта",
      "EscapeQuotes": "Экранировать одинарные и двойные кавычки",
      "EscapeTabCRLFInAttr": "Экранировать табуляции и переводы строк в атрибутах",
      "Prettify": "Добавлять отступы и переводы строк",
      "WriteBOM": "Записывать Byte Order Mark"
    }
  },
  "imports/excelfile": {
    "ImportExcelFileEngine": {
      "AllRows": "До последней строки",
      "BlankRowAction": "Пустые строки",
      "ExplicitRange": "Диапазон",
      "ReferenceStyle": "Стиль ссылок",
      "TableName": "Имя объекта",
      "TableNamingMethod": "Выбор объекта",
      "TitleRowCount": "Количество строк заголовка",
      "UsedRange": "Весь лист"
    }
  },
  "imports/textfile": {
    "ImportTextFile": {
      "CodePage": "Кодовая страница",
      "DateFormat": "Формат даты",
      "DateSeparator": "Разделитель даты",
      "DecimalSeparator": "Десятичный разделитель",
      "DelimiterChar": "Разделитель столбцов",
      "FirstLineAsTitle": "Заголовок в первой строке",
      "MultipleDelimiters": "Принимать несколько подряд разделителей за один",
      "RowsToSkip": "Пропустить строк",
      "TextQualifier": "Ограничитель строк",
      "TimeSeparator": "Разделитель времени",
      "ValueFalse": "Ложь",
      "ValueNull": "Пусто",
      "ValueTrue": "Истина"
    }
  },
  "imports/xml": {
    "ImportXML": {
      "Configurator": "Настройки импорта XML"
    }
  },
  "Libraries/1CConnection/1CConnection": {
    "1CConnectionConfigurator": {
      "ConnectionString": "Строка подключения",
      "Password": "Пароль",
      "SavePassword": "Сохранить пароль",
      "UserName": "Имя пользователя"
    }
  },
  "Libraries/1CConnection/1Cv8Connection": {
    "1Cv8ConnectionConfigurator": {
      "PlatformVersion": "Версия платформы"
    }
  },
  "Libraries/bgdbrtl/DB": {
    "ConnPoolConfigurable": {
      "PoolingOptions": "Настройки пула"
    },
    "ConnPoolConfigurator": {
      "ClearPoolOnDeactivate": "Очищать пул при деактивации"
    },
    "DatabaseConfigurator": {
      "CharacterSet": "Кодовая страница",
      "DatabasePath": "Строка подключения",
      "Direct": "Не использовать клиент СУБД",
      "ObjectQuotes": "Настройка кавычек",
      "Password": "Пароль",
      "QuotedObjectNames": "Обрамлять имена кавычками",
      "SavePassword": "Сохранить пароль",
      "SystemTables": "Показывать системные таблицы",
      "UserName": "Логин"
    }
  },
  "Libraries/bgdbrtl/MyUniDACDB": {
    "MyUniDACDatabaseConfigurator": {
      "WaitTimeoutTransaction": "Время жизни на время транзакции при неактивности"
    }
  },
  "Libraries/bgdbrtl/SQLiteUniDACDB": {
    "SQLiteFunctionDefs": {
      "CaseChangeUnicode": "lower, upper для UNICODE",
      "LikeMode": "Режим работы LIKE",
      "NoCaseUnicode": "Трактовать NOCASE как UNICODE"
    },
    "SQLitePragmas": {
      "CacheSize": "Размер кэша",
      "JournalMode": "Режим журнала транзакций",
      "Synchronous": "Режим синхронизации"
    },
    "SQLiteUniDACDatabaseConfigurator": {
      "Encrypted": "Зашифрованная БД"
    }
  },
  "Libraries/bgrtl/ColumnInfoLinks": {
    "ColumnInfoLinkDef": {
      "Name": "Имя столбца"
    }
  },
  "Libraries/bgrtl/DataSet": {
    "ColumnDef": {
      "DataKind": "Вид данных столбца",
      "DataType": "Тип данных столбца",
      "DefaultUsageType": "Назначение столбца по умолчанию",
      "DisplayName": "Метка",
      "Index": "Индекс",
      "Name": "Имя",
      "Size": "Максимальная длина (кол-во символов) строковых значений столбца",
      "Usable": "Признак использования столбца (суррогат UsageType)",
      "UsageType": "Назначение столбца"
    },
    "TuneColumnDef": {
      "Extension": "Расширение настраиваемого описания столбца"
    }
  },
  "Libraries/bgrtl/Interfaces": {
    "CollectionItem": {
      "ID": "Идентификатор",
      "Name": "Имя"
    },
    "NamedItem": {
      "Name": "Имя элемента"
    }
  },
  "Libraries/bgrtl/Logger": {
    "LoggerConfigurator": {
      "LogFileMaxIndex": "Количество резервных файлов",
      "LogFileMaxSize": "Максимальный размер файла",
      "LogFileName": "Имя файла",
      "LogFileRewrite": "Перезапись файла",
      "MinLogLevel": "Уровень логирования"
    }
  },
  "Libraries/bgrtl/Statistics": {
    "StatInfo": {
      "Avg": "Среднее",
      "DataType": "Тип данных значений",
      "Max": "Максимум",
      "Min": "Минимум"
    }
  },
  "Libraries/bgrtl/Variables": {
    "VariableInfo": {
      "DataType": "Тип данных"
    }
  },
  "Libraries/DataPartition/LearnPartition": {
    "LearnPartition": {
      "Folds": "Колод кросс-валидации",
      "Iterations": "Итераций ресемплинга",
      "KFoldsSamplingMethod": "Метод сэмплинга",
      "LearnPartitionMethod": "Метод разбиения",
      "LearnValidationMethod": "Метод валидации",
      "PRowsCount": "Число исключаемых строк",
      "TrainDataSetSize": "Размер обучающего множества",
      "ValidationColumnIndex": "Поле заданного разбиения",
      "ValidationDataSetSize": "Размер валидационного множества"
    }
  },
  "Libraries/DataPartition/Partition": {
    "Partition": {
      "CompleteUniqueValues": "Полнота списка уникальных значений",
      "PartitionMethod": "Метод сэмплинга",
      "TeachDataSetSize": "Размер обучающей выборки",
      "TeachGroupSize": "Размер обучающей группы",
      "TestDataSetSize": "Размер тестовой выборки",
      "TestGroupSize": "Размер тестовой группы",
      "TestPriority": "Приоритет тестового множества",
      "TestPriorityPosition": "Положение приоритетного тестового множества"
    }
  },
  "Libraries/DataSampling/Sampling": {
    "Sampling": {
      "CompleteUniqueValues": "Полнота списка уникальных значений",
      "GroupSize": "Размер группы",
      "SamplingMethod": "Метод сэмплинга",
      "SamplingRecordCount": "Число записей в выходной выборке"
    }
  },
  "Libraries/DBConnection/DBConnection": {
    "DBConnectionConfigurator": {
      "DatabaseConfigurator": "Настройки подключения к БД"
    }
  },
  "Libraries/ExportXMLConfigurator/ExportXMLConfigurator": {
    "ExportXMLConfigurator": {
      "SpecifyTimeZone": "Наличие временной зоны"
    }
  },
  "Libraries/FileConnection/ExportFileModelComponentEngine": {
    "ExportFileModelComponentEngine": {
      "FileName": "Имя файла"
    }
  },
  "Libraries/FileConnection/ImportFileModelComponentEngine": {
    "ImportFileModelComponentEngine": {
      "FileName": "Имя файла"
    }
  },
  "Libraries/ImportXMLConfigurator/ImportXMLConfigurator": {
    "ImportXMLConfigurator": {
      "CompositeColumnNames": "Генерировать составные метки полей",
      "IgnoreAbsentValues": "Разрешить пропуск обязательных полей",
      "RepeatUniqueValues": "Дублировать единичные значения",
      "StrictValidation": "Проверять на строгое соответствие XSD",
      "TimeZone": "Временная зона по умолчанию"
    }
  },
  "Libraries/Model/ComponentSettings": {
    "ComponentSettings": {
      "Disabled": "Отключен"
    }
  },
  "Libraries/Model/DeductorServerSettings": {
    "DeductorServerSettings": {
      "PackagePoolSize": "Размер пула пакетов",
      "SessionBackupDirectory": "Директория, содержащая резервные копии сессий",
      "StopTimeout": "Таймаут остановки сервера",
      "UserStorageDirectory": "Директория, содержащая личные папки пользователей"
    },
    "SocketDeductorServerSettings": {
      "Bind": "Прослушиваемые адреса",
      "PingPeriod": "Период проверки соединения с клиентом",
      "Port": "TCP порт",
      "SSLCertificateFile": "Имя файла сертификата",
      "SSLPrivateKeyFile": "Имя файла закрытого ключа",
      "WSPort": "WebSocket порт",
      "WSSPort": "WebSocket SSL/TLS порт"
    }
  },
  "Libraries/Model/ModelConnectionComponentEngine": {
    "ModelConnectionComponentEngine": {
      "Connection": "Подключение"
    }
  },
  "Libraries/Normalization/NormalDataSourceModelComponentEngine": {
    "NormalDataSourceModelComponentEngine": {
      "AllowMissingValues": "Разрешить пропущенные значения",
      "LearnPartition": "Разбиение данных компонента с обучением"
    }
  },
  "Libraries/Regression/Regression": {
    "FactorSelectionParams": {
      "AddSignificance": "Порог значимости при добавлении фактора",
      "Hierarchy": "Иерархия взаимодействий",
      "RemoveSignificance": "Порог значимости при исключении фактора"
    },
    "RegressionClassificationParams": {
      "EventId": "Индекс заданного события",
      "EventType": "Тип события",
      "Threshold": "Порог отсечения"
    },
    "RegressionParams": {
      "AutoMethod": "Автоматическая настройка",
      "AutoPriority": "Приоритет автоматической настройки",
      "Denormalize": "Денормализировать коэффициенты модели",
      "Epsilon": "Точность решения",
      "FactorSelection": "Настройки пошагового отбора факторов",
      "Intercept": "Включить в модель константу",
      "Regularization": "Настройки регуляризации",
      "SimpleParams": "Параметры упрощенной настройки регрессии",
      "Statistics": "Настройки расчета статистики отбора факторов",
      "UseDetailedSettings": "Использовать детальные настройки"
    },
    "RegressionSimpleParams": {
      "ExactInexact": "Приоритет точные/недостоверные данные",
      "FactLessMore": "Приоритет меньше/больше факторов",
      "QualitySpeed": "Приоритет точность/скорость"
    },
    "RegressionStatisticsParams": {
      "PredictionIntervalLevel": "% доверительного интервала",
      "PredictionIntervalNeeded": "Рассчитать доверительный интервал",
      "StatisticsMode": "Режим расчета статистики"
    },
    "RegularizationParams": {
      "LambdaLasso": "Коэффициент L1-регуляризации",
      "LambdaRidge": "Коэффициент L2-регуляризации",
      "LassoSetupMethod": "Установка коэффициента L1-регуляризации",
      "RidgeSetupMethod": "Установка коэффициента L2-регуляризации"
    }
  },
  "Libraries/RESTClientConnection/RESTClientConnection": {
    "RESTClientConnectionConfigurator": {
      "ClientAuth": "Авторизация для выполнения запроса",
      "ExchangeTimeOut": "Таймаут обмена данными (мс)",
      "IgnoreCertificateErrors": "Игнорировать ошибки SSL сертификата",
      "RequestContentType": "Тип Content-type запроса",
      "ResponseContentType": "Тип Content-type ответа",
      "TimeOut": "Таймаут подключения (мс)",
      "URL": "URL сервиса",
      "Verb": "Метод"
    }
  },
  "Libraries/WSDLClientConnection/WSDLClientConnection": {
    "WSDLClientConnectionConfigurator": {
      "ClientAuth": "Авторизация для выполнения запроса",
      "ClientUsesWSDLAuth": "Авторизация та же, что и для получения WSDL",
      "ExchangeTimeOut": "Таймаут обмена данными (мс)",
      "IgnoreCertificateErrors": "Игнорировать ошибки SSL сертификата",
      "ReserveWSDLSource": "Резервный источник WSDL",
      "ReserveWSDLSourceOn": "Включить резервный источник WSDL",
      "TimeOut": "Таймаут подключения (мс)",
      "WSDLAuth": "Авторизация для получения WSDL-файла",
      "WSDLSource": "Источник WSDL",
      "XSLT": "Расположение XSLT",
      "XSLTOn": "Преобразовать WSDL-описание с помощью XSLT"
    }
  },
  "Viewers/Chart/ChartColumnInfo": {
    "ChartColumnInfo": {
      "DisplayName": "Отображаемое имя колонки",
      "Name": "Имя колонки"
    },
    "ChartColumnLink": {
      "LinkKind": "Тип колонки"
    }
  }
}